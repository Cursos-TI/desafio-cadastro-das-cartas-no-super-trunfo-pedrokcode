#include <stdio.h>

// --- Função recursiva para movimento da Torre (direita)
void moverTorre(int casas) {
    if (casas == 0) return;
    printf("Direita\n");
    moverTorre(casas - 1);
}

// --- Função recursiva + loops aninhados para movimento do Bispo (diagonal: cima direita)
void moverBispo(int linhas, int colunas) {
    if (linhas == 0 || colunas == 0) return;

    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            if (i == j) {
                printf("Cima Direita\n");
            }
        }
    }

    moverBispo(linhas - 1, colunas - 1);
}

// --- Função recursiva para movimento da Rainha (esquerda)
void moverRainha(int casas) {
    if (casas == 0) return;
    printf("Esquerda\n");
    moverRainha(casas - 1);
}

// --- Movimento do Cavalo com loops complexos: 2 casas cima + 1 direita
void moverCavaloL() {
    printf("\nMovimento do Cavalo:\n");

    for (int cima = 0; cima <= 2; cima++) {
        for (int direita = 0; direita <= 1; direita++) {
            if (cima < 2) {
                printf("Cima\n");
            } else if (cima == 2 && direita == 1) {
                printf("Direita\n");
                break;
            } else {
                continue;
            }
        }
    }
}

int main() {
    // Quantidade de casas para cada peça
    int casasTorre = 5;
    int casasBispo = 5;
    int casasRainha = 8;

    // --- Torre
    printf("Movimento da Torre:\n");
    moverTorre(casasTorre);

    // --- Bispo
    printf("\nMovimento do Bispo:\n");
    moverBispo(casasBispo, casasBispo);

    // --- Rainha
    printf("\nMovimento da Rainha:\n");
    moverRainha(casasRainha);

    // --- Cavalo
    moverCavaloL();

    return 0;
}
